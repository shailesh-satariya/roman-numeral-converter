{"version":3,"sources":["components/input.tsx","utils/roman-numerals.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","type","name","label","error","onChange","rest","data-test","className","htmlFor","id","event","target","value","RomanNumerals","input","num","Number","isNaN","Error","isInteger","test","key","numerals","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","roman","Object","keys","q","Math","floor","repeat","toUpperCase","split","val","length","ch","shift","initState","number","toRoman","toString","App","React","useState","state","setState","onNumberChange","useCallback","currState","e","numberError","message","onRomanChange","toNumber","romanError","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.694da732.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport interface InputProps {\r\n    type: \"text\" | \"number\";\r\n    name: string;\r\n    label: string;\r\n    onChange: (value: string) => void;\r\n    error?: string;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Input: ({type, name, label, error, onChange, ...rest}: InputProps) => JSX.Element = ({type, name, label, error, onChange, ...rest}: InputProps): JSX.Element => {\r\n    return (\r\n        <div data-test=\"component-input\" className=\"form-group\">\r\n            <label data-test=\"element-label\" htmlFor={name}>{label}</label>\r\n            <input data-test=\"element-input\" type={type} className={\"form-control\" + (error ? \" is-invalid\" : \"\")}\r\n                   id={name}\r\n                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => onChange(event.target.value)} {...rest}/>\r\n            {\r\n                error ? <div data-test=\"element-error-div\" className=\"invalid-feedback\">{error}</div> : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","export default class RomanNumerals {\r\n    /**\r\n     * toRoman function\r\n     * @function\r\n     *\r\n     * @throws errors\r\n     *\r\n     * @param {number | string} input\r\n     *\r\n     * @return {string}\r\n     */\r\n    public static toRoman(input: number | string): string {\r\n        let num: number = Number(input);\r\n\r\n        if (isNaN(num)) {\r\n            throw new Error(`\"${input}\" is not a number that can be converted to Roman numerals.`);\r\n        }\r\n\r\n        if (!Number.isInteger(num) || !(/^-?\\d+$/.test(`${input}`))) {\r\n            throw new Error(`Only integers can be converted to Roman numerals.`);\r\n        }\r\n\r\n        if (num < 0) {\r\n            throw new Error(`Only positive numbers can be converted to Roman numerals.`);\r\n        }\r\n\r\n        if (num > 999999) {\r\n            throw new Error(`\"${input}\" is to big. Keep it less than 1000000.`);\r\n        }\r\n\r\n        const numerals: Record<string, number> = {\r\n            M: 1000,\r\n            CM: 900,\r\n            D: 500,\r\n            CD: 400,\r\n            C: 100,\r\n            XC: 90,\r\n            L: 50,\r\n            XL: 40,\r\n            X: 10,\r\n            IX: 9,\r\n            V: 5,\r\n            IV: 4,\r\n            I: 1\r\n        };\r\n        let roman: string = \"\";\r\n        let key: string;\r\n        for (key of Object.keys(numerals)) {\r\n            const q: number = Math.floor(num / numerals[key]);\r\n            num -= q * numerals[key];\r\n            roman += key.repeat(q);\r\n            if (num === 0) {\r\n                break;\r\n            }\r\n        }\r\n        return roman;\r\n    }\r\n\r\n    /**\r\n     * toNumber function\r\n     * @function\r\n     *\r\n     * @throws errors\r\n     *\r\n     * @param {string} input\r\n     *\r\n     * @return {number}\r\n     */\r\n    public static toNumber(input: string): number {\r\n        const numerals: Record<string, number> = {I: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000};\r\n\r\n        let roman: string[] = input.toUpperCase().split(\"\");\r\n        let num: number = 0;\r\n        let val: number = 0;\r\n\r\n        while (roman.length) {\r\n            const ch: string | undefined = roman.shift();\r\n            if (!ch || !(ch in numerals)) {\r\n                throw new Error(`\"${input}\" is not a Roman numerals.`);\r\n            }\r\n\r\n            val = numerals[ch];\r\n            num += val * (val < numerals[roman[0]] ? -1 : 1);\r\n        }\r\n        return num;\r\n    }\r\n}","import React from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\nimport RomanNumerals from \"./utils/roman-numerals\";\n\nexport interface AppState {\n    number: string;\n    roman: string;\n    numberError?: string;\n    romanError?: string;\n}\n\nconst initState: AppState = {\n    number: \"1\",\n    roman: RomanNumerals.toRoman(\"1\").toString()\n};\n\nconst App: React.FC = (): JSX.Element => {\n    const [state, setState] = React.useState(initState);\n\n    const onNumberChange: (number: string, currState: AppState) => void = React.useCallback((number: string, currState: AppState): void => {\n        try {\n            const roman: string = RomanNumerals.toRoman(number);\n            setState({number, roman});\n        } catch (e) {\n            setState({...currState, number, numberError: e.message});\n        }\n    }, []);\n\n    const onRomanChange: ((roman: string, currState: AppState) => void) = React.useCallback((roman: string, currState: AppState): void => {\n        try {\n            const number: string = RomanNumerals.toNumber(roman).toString();\n            setState({number, roman});\n        } catch (e) {\n            setState({...currState, roman, romanError: e.message});\n        }\n    }, []);\n\n    return (\n        <div data-test=\"component-app\" className=\"card m-5\">\n            <h5 className=\"card-header\">\n                Roman Numeral Converter\n            </h5>\n            <div className=\"card-body\">\n                <div className=\"form-row\">\n                    <div className=\"col-md-5\">\n                        <Input data-test=\"element-input-number\" type=\"number\" name=\"number\" label=\"Number\"\n                               onChange={(value: string) => onNumberChange(value, state)}\n                               value={state.number}\n                               title={state.number} {...(state.numberError ? {error: state.numberError} : {})}/>\n                    </div>\n                    <div className=\"col-md-2 d-flex justify-content-center\">\n                        <h2 className=\"mt-4\">=</h2>\n                    </div>\n                    <div className=\"col-md-5\">\n                        <Input data-test=\"element-input-roman\" type=\"text\" name=\"roman\" label=\"Roman\"\n                               onChange={(value: string) => onRomanChange(value, state)}\n                               value={state.roman}\n                               title={state.roman} {...(state.romanError ? {error: state.romanError} : {})}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}